#
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# Copyright (C) 2022 hugcabbage <fengsongtianxia@gmail.com>
#
# This is free software, licensed under the MIT License.
#
#<https://github.com/hugcabbage/shared-lede>
#
# 源码采用lean lede或者lienol openwrt master分支
#
name: OpenwrtCI
on:
  workflow_dispatch:
    inputs:
      build:
        description: '若要编译固件，请输入true'
        required: true
        default: 'true'
      model:
        description: '选择机型'
        required: true
        default: 'xiaomi-4a-gigabit' 
        type: choice
        options:
          - 'xiaomi-4a-gigabit'
          - 'xiaomi-3g-v2'
          - 'xiaomi-cr6608'
          - 'xiaomi-cr6606'
          - 'xiaomi-cr6609'
          - 'xiaomi-3g'
          - 'xiaomi-4'
          - 'xiaomi-3-pro'
          - 'redmi-ac2100'
          - 'xiaomi-ac2100'
          - 'phicomm-k2p'
          - 'redmi-ax6s'
      version_description:
        description: '输入版本描述'     
        required: true
        default: '升级内容：内核升级，更新应用版本'
      cpu_overclock:
        description: '超频到1100Mhz(仅适用于5.10内核)'
        required: false
        default: 'false'
        type: boolean
      kernel_5_15:
        description: '使用5.15内核'
        required: false
        default: 'false'
        type: boolean
env:
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
jobs:
  build_openwrt:
    name: Build MI-R4A
    runs-on: ubuntu-latest
    if: github.event.inputs.build == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: 环境准备
        run: |
          #sudo rm -rf /usr/share/dotnet /etc/mysql /etc/apt/sources.list.d /usr/local/lib/android /opt/ghc
          #sudo -E apt-get -y purge ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 zip unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          pip install -r requirements.txt
          df -h
      - name: 读取配置文件
        id: transit
        env:
          TARGET_SE: preset-models/transit.py
        run: |
          MODEL_NAME=${{ github.event.inputs.model }}; echo "你选择了：$MODEL_NAME"
          FILEPATHS=($(python3 $TARGET_SE $MODEL_NAME))
          echo "CLONE_SH=${FILEPATHS[0]}" >> $GITHUB_ENV
          echo "MODIFY_SH=${FILEPATHS[1]}" >> $GITHUB_ENV
          echo "CONFIG_PA=${FILEPATHS[2]}" >> $GITHUB_ENV
          RELEASE_TEXT=${FILEPATHS[3]}
          echo "RELEASE_TITLE=$(sed -n '1p' $RELEASE_TEXT)" >> $GITHUB_OUTPUT
          echo 'RELEASE_BODY<<EOF' >> $GITHUB_OUTPUT; sed -n '2,$p' $RELEASE_TEXT >> $GITHUB_OUTPUT; echo 'EOF' >> $GITHUB_OUTPUT
      - name: 下载源码与插件
        run: |
          chmod +x $CLONE_SH
          $CLONE_SH
      - name: 升级feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: 修改配置
        run: |
          [ ${{ github.event.inputs.cpu_overclock }} == true ] && sed -i '/322-mt7621-fix-cpu-clk-add-clkdev.patch/ s/#//' $MODIFY_SH
          [ ${{ github.event.inputs.kernel_5_15 }} == true ] && sed -i '/KERNEL_PATCHVER:=5.15/ s/#//' $MODIFY_SH
          chmod +x $MODIFY_SH
          $MODIFY_SH
      - name: 生成.config文件
        run: |
          mv -f $CONFIG_PA ./.config
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h
      - name: Compile the firmware
        run: |
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 V=s
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          
      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ./bin
      
      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd ./bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
             
      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 6
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}